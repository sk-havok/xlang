// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.000000.0
#pragma once
#include "winrt/Component.h"
namespace winrt::Component::implementation
{
    template <typename D, typename... I>
    struct WINRT_EBO Class_base : implements<D, Windows::Foundation::IInspectable, I...>
    {
        using base_type = Class_base;
        using fast_class_type = Component::Class;
        using implements_type = typename Class_base::implements_type;
        using implements_type::implements_type;
        
        operator impl::producer_ref<fast_class_type> const() const noexcept
        {
            return { to_abi<Windows::Foundation::IInspectable>(this) };
        }

        hstring GetRuntimeClassName() const
        {
            return L"Component.Class";
        }
    };
}
namespace winrt::Component::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct WINRT_EBO ClassT : implements<D, fast_factory<Component::Class>, I...>
    {
        using instance_type = Component::Class;

        hstring GetRuntimeClassName() const
        {
            return L"Component.Class";
        }
            hstring Method(Component::Class const& winrt_impl_this) const
        {
            return get_self<implementation::Class>(winrt_impl_this)->Method();
        }
        hstring Property(Component::Class const& winrt_impl_this) const
        {
            return get_self<implementation::Class>(winrt_impl_this)->Property();
        }
        void Property(Component::Class const& winrt_impl_thishstring const& value) const
        {
            return get_self<implementation::Class>(winrt_impl_this)->Property(value);
        }
        Component::Class CreateInstance(hstring const& a) const
        {
            return { a };
        }
        hstring StaticMethod() const
        {
            return implementation::Class::StaticMethod();
        }
        [[noreturn]] Component::Class ActivateInstance() const
        {
            throw hresult_not_implemented();
        }
};
}

#if defined(WINRT_FORCE_INCLUDE_CLASS_XAML_G_H) || __has_include("Component.Class.xaml.g.h")
#include "Component.Class.xaml.g.h"
#else

namespace winrt::Component::implementation
{
    template <typename D, typename... I>
    using ClassT = Class_base<D, I...>;
}

#endif
