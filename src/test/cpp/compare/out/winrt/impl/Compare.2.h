// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.000000.0
#pragma once
#include "winrt/impl/Compare.1.h"
namespace winrt::Compare
{
    struct Delegate : Windows::Foundation::IUnknown
    {
        Delegate(std::nullptr_t = nullptr) noexcept {}
        template <typename L> Delegate(L lambda);
        template <typename F> Delegate(F* function);
        template <typename O, typename M> Delegate(O* object, M method);
        template <typename O, typename M> Delegate(com_ptr<O>&& object, M method);
        template <typename O, typename M> Delegate(weak_ref<O>&& object, M method);
        void operator()(param::hstring const& arg) const;
    };
    struct WINRT_EBO Class : Windows::Foundation::IInspectable
    {
        using base_type = Windows::Foundation::IInspectable;

        Class(std::nullptr_t) noexcept {}
        ~Class() noexcept;
        Class(construct_from_abi_t, void* ptr) noexcept;
        Class(Class const& other) noexcept;
        Class(Class&&) noexcept = default;
        Class& operator=(Class const& other) noexcept;
        Class& operator=(Class&& other) noexcept;
        Class& operator=(std::nullptr_t) noexcept;
        void attach_abi(void* ptr) noexcept;
        void* detach_abi() noexcept;
        Class(param::hstring const& a);
        static hstring StaticMethod();
        hstring Method() const;
    };
}
