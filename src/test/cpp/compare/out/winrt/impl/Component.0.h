// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.000000.0
#pragma once
#include "winrt/base.h"
namespace winrt::Component
{
    struct IClass;
    struct IClassFactory;
    struct IClassStatics;
    struct Class;
    struct Delegate;
}
namespace winrt::impl
{
    template <> struct category<Component::IClass>
    {
        using type = interface_category;
    };
    template <> struct category<Component::IClassFactory>
    {
        using type = interface_category;
    };
    template <> struct category<Component::IClassStatics>
    {
        using type = interface_category;
    };
    template <> struct category<Component::Class>
    {
        using type = class_category;
    };
    template <> struct category<Component::Delegate>
    {
        using type = delegate_category;
    };
    template <> struct name<Component::IClass>
    {
        static constexpr auto & value{ L"Component.IClass" };
    };
    template <> struct name<Component::IClassFactory>
    {
        static constexpr auto & value{ L"Component.IClassFactory" };
    };
    template <> struct name<Component::IClassStatics>
    {
        static constexpr auto & value{ L"Component.IClassStatics" };
    };
    template <> struct name<Component::Class>
    {
        static constexpr auto & value{ L"Component.Class" };
    };
    template <> struct name<Component::Delegate>
    {
        static constexpr auto & value{ L"Component.Delegate" };
    };
    template <> struct guid_storage<Component::IClass>
    {
        static constexpr guid value{ 0xAC55B9DC,0x9198,0x55D4,{ 0x92,0x4C,0x81,0x4B,0x45,0x76,0x0A,0xB5 } };
    };
    template <> struct guid_storage<Component::IClassFactory>
    {
        static constexpr guid value{ 0x683E2691,0x9CC5,0x5BC5,{ 0x9C,0x0F,0x8A,0xAC,0xC5,0x23,0x8D,0x3D } };
    };
    template <> struct guid_storage<Component::IClassStatics>
    {
        static constexpr guid value{ 0xE7D9CBE4,0x9654,0x5852,{ 0x81,0xF5,0x3A,0x6F,0xD5,0x74,0x9B,0x57 } };
    };
    template <> struct guid_storage<Component::Delegate>
    {
        static constexpr guid value{ 0x3B1CAA92,0xA392,0x534B,{ 0xA6,0x1D,0x66,0xE8,0xCB,0xA1,0xEE,0xBE } };
    };
    template <> struct default_interface<Component::Class>
    {
        using type = Component::IClass;
    };
    template <> struct abi<Component::IClass>
    {
        struct type : inspectable_abi
        {
            virtual int32_t WINRT_CALL Method(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Property(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_Property(void*) noexcept = 0;
        };
    };
    template <> struct abi<Component::IClassFactory>
    {
        struct type : inspectable_abi
        {
            virtual int32_t WINRT_CALL CreateInstance(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<Component::IClassStatics>
    {
        struct type : inspectable_abi
        {
            virtual int32_t WINRT_CALL StaticMethod(void**) noexcept = 0;
        };
    };
    template <> struct abi<Component::Delegate>
    {
        struct type : unknown_abi
        {
            virtual int32_t WINRT_CALL Invoke(void*) noexcept = 0;
        };
    };
    template <> struct abi<fast_factory<Component::Class>>
    {
        struct type : inspectable_abi
        {
            virtual int32_t WINRT_CALL ActivateInstance(void**) noexcept = 0;
            virtual int32_t WINRT_CALL Method(void*, void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Property(void*, void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_Property(void*, void*) noexcept = 0;
            virtual int32_t WINRT_CALL CreateInstance(void*, void**) noexcept = 0;
            virtual int32_t WINRT_CALL StaticMethod(void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Component_IClass
    {
        hstring Method() const;
        hstring Property() const;
        void Property(param::hstring const& value) const;
    };
    template <> struct consume<Component::IClass>
    {
        template <typename D> using type = consume_Component_IClass<D>;
    };
    template <typename D>
    struct consume_Component_IClassFactory
    {
        Component::Class CreateInstance(param::hstring const& a) const;
    };
    template <> struct consume<Component::IClassFactory>
    {
        template <typename D> using type = consume_Component_IClassFactory<D>;
    };
    template <typename D>
    struct consume_Component_IClassStatics
    {
        hstring StaticMethod() const;
    };
    template <> struct consume<Component::IClassStatics>
    {
        template <typename D> using type = consume_Component_IClassStatics<D>;
    };
    template <typename D>
    struct consume_Component_Class
    {
        hstring Method(Component::Class const&) const;
        hstring Property(Component::Class const&) const;
        void Property(Component::Class const&, param::hstring const& value) const;
        Component::Class CreateInstance(param::hstring const& a) const;
        hstring StaticMethod() const;
    };
    template <> struct consume<fast_factory<Component::Class>>
    {
        template <typename D> using type = consume_Component_Class<D>;
    };
}
